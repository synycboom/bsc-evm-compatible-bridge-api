// Code generated by go-swagger; DO NOT EDIT.

package erc_1155_swap_pairs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetErc1155SwapPairsURL generates an URL for the get erc1155 swap pairs operation
type GetErc1155SwapPairsURL struct {
	DstChainID   *string
	DstTokenAddr *string
	Limit        *int32
	Offset       *int32
	SrcChainID   *string
	SrcTokenAddr *string
	State        *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetErc1155SwapPairsURL) WithBasePath(bp string) *GetErc1155SwapPairsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetErc1155SwapPairsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetErc1155SwapPairsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/v1/erc-1155-swap-pairs"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var dstChainIDQ string
	if o.DstChainID != nil {
		dstChainIDQ = *o.DstChainID
	}
	if dstChainIDQ != "" {
		qs.Set("dst_chain_id", dstChainIDQ)
	}

	var dstTokenAddrQ string
	if o.DstTokenAddr != nil {
		dstTokenAddrQ = *o.DstTokenAddr
	}
	if dstTokenAddrQ != "" {
		qs.Set("dst_token_addr", dstTokenAddrQ)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt32(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = swag.FormatInt32(*o.Offset)
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var srcChainIDQ string
	if o.SrcChainID != nil {
		srcChainIDQ = *o.SrcChainID
	}
	if srcChainIDQ != "" {
		qs.Set("src_chain_id", srcChainIDQ)
	}

	var srcTokenAddrQ string
	if o.SrcTokenAddr != nil {
		srcTokenAddrQ = *o.SrcTokenAddr
	}
	if srcTokenAddrQ != "" {
		qs.Set("src_token_addr", srcTokenAddrQ)
	}

	var stateQ string
	if o.State != nil {
		stateQ = *o.State
	}
	if stateQ != "" {
		qs.Set("state", stateQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetErc1155SwapPairsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetErc1155SwapPairsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetErc1155SwapPairsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetErc1155SwapPairsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetErc1155SwapPairsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetErc1155SwapPairsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
